import os
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
import asyncpg
from datetime import datetime
import asyncio
import aiohttp
from decimal import Decimal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
API_TOKEN = os.getenv("API_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
async def get_db():
    return await asyncpg.connect(
        user='postgres',
        password='postgres',
        database='rgz',
        host='localhost',
        port=5432
    )

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class RegState(StatesGroup):
    waiting_for_username = State()

class AddOperationState(StatesGroup):
    waiting_for_type = State()
    waiting_for_sum = State()
    waiting_for_date = State()

class CurrencyChoiceState(StatesGroup):
    waiting_for_currency = State()


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@dp.message(Command("reg"))
async def cmd_reg(message: Message, state: FSMContext):
    db = await get_db()
    user = await db.fetchrow("SELECT * FROM users WHERE chat_id = $1", message.chat.id)
    if user:
        await message.answer("ü´µ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        await db.close()
        return
    await message.answer("üíÖ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–ª–æ–≥–∏–Ω):")
    await state.set_state(RegState.waiting_for_username)
    await db.close()

@dp.message(RegState.waiting_for_username)
async def process_username(message: Message, state: FSMContext):
    db = await get_db()
    await db.execute("INSERT INTO users (name, chat_id) VALUES ($1, $2)", message.text, message.chat.id)
    await message.answer(f"üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, {message.text}!")
    await db.close()
    await state.clear()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
@dp.message(Command("add_operation"))
async def cmd_add_operation(message: Message, state: FSMContext):
    db = await get_db()
    user = await db.fetchrow("SELECT * FROM users WHERE chat_id = $1", message.chat.id)
    if not user:
        await message.answer("üôÖ‚Äç‚ôÄÔ∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /reg.")
        await db.close()
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –î–û–•–û–î üí∞", callback_data="income")],
        [InlineKeyboardButton(text="üí∏ –†–ê–°–•–û–î üí∏", callback_data="expense")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:", reply_markup=keyboard)
    await state.set_state(AddOperationState.waiting_for_type)
    await db.close()

@dp.callback_query(AddOperationState.waiting_for_type)
async def process_type(callback: CallbackQuery, state: FSMContext):
    type_map = {"income": "–î–û–•–û–î", "expense": "–†–ê–°–•–û–î"}
    await state.update_data(type_operation=type_map[callback.data])
    await callback.message.answer("üí≤ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏ (–≤ —Ä—É–±–ª—è—Ö):")
    await callback.answer()
    await state.set_state(AddOperationState.waiting_for_sum)

@dp.message(AddOperationState.waiting_for_sum)
async def process_sum(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.'))
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1500.50")
        return
    await state.update_data(sum=amount)
    await message.answer("üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
    await state.set_state(AddOperationState.waiting_for_date)

@dp.message(AddOperationState.waiting_for_date)
async def process_date(message: Message, state: FSMContext):
    try:
        date_obj = datetime.strptime(message.text, "%Y-%m-%d").date()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
        return

    data = await state.get_data()
    db = await get_db()
    await db.execute(
        "INSERT INTO operations (date, sum, chat_id, type_operation) VALUES ($1, $2, $3, $4)",
        date_obj, data["sum"], message.chat.id, data["type_operation"]
    )
    await message.answer("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await db.close()
    await state.clear()

# 1-3. –ö–æ–º–∞–Ω–¥–∞ /operations, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã
@dp.message(Command("operations"))
async def cmd_operations(message: Message, state: FSMContext):
    db = await get_db()
    user = await db.fetchrow("SELECT * FROM users WHERE chat_id = $1", message.chat.id)
    await db.close()

    if not user:
        await message.answer("üôÖ‚Äç‚ôÄÔ∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /reg.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="RUB", callback_data="RUB")],
        [InlineKeyboardButton(text="EUR", callback_data="EUR")],
        [InlineKeyboardButton(text="USD", callback_data="USD")]
    ])
    await message.answer("ü§î –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:", reply_markup=keyboard)
    await state.set_state(CurrencyChoiceState.waiting_for_currency)


# 4‚Äì8. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª—é—Ç—ã, –∑–∞–ø—Ä–æ—Å –∫ –≤–Ω–µ—à–Ω–µ–º—É —Å–µ—Ä–≤–∏—Å—É, –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏ –≤—ã–≤–æ–¥
@dp.callback_query(CurrencyChoiceState.waiting_for_currency)
async def process_currency(callback: CallbackQuery, state: FSMContext):
    currency = callback.data
    await callback.answer()

    # —à–∞–≥ 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    rate = 1.0
    if currency in ["EUR", "USD"]:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"http://localhost:5000/rate?currency={currency}") as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        rate = data.get("rate", 1.0)
                    else:
                        await callback.message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç.")
                        return
        except Exception:
            await callback.message.answer("–í–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return

    # —à–∞–≥ 6. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
    db = await get_db()
    operations = await db.fetch("SELECT * FROM operations WHERE chat_id = $1", callback.from_user.id)
    await db.close()

    # —à–∞–≥ 7. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
    if not operations:
        await callback.message.answer("üòµ‚Äçüí´ –£ –≤–∞—Å –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.")
        return

    rate = Decimal(str(rate))  # –ü—Ä–∏–≤–æ–¥–∏–º –∫—É—Ä—Å –∫ Decimal

    text = f"üôå –í–∞—à–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –≤–∞–ª—é—Ç–µ {currency}:\n"
    for op in operations:
        date = op["date"].strftime("%d-%m-%Y")
        sum_converted = round(op["sum"] / rate, 2)
        text += f"{date}: {op['type_operation']} - {sum_converted} {currency}\n"

    # —à–∞–≥ 8. –í—ã–≤–æ–¥
    await callback.message.answer(text)
    await state.clear()


if __name__ == "__main__":
    async def main():
        await dp.start_polling(bot)

    asyncio.run(main())
