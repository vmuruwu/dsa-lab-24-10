import os
import asyncpg
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message, ReplyKeyboardRemove, BotCommand, BotCommandScopeDefault, BotCommandScopeChat
from aiogram.filters import Command
import re
import logging
from decimal import Decimal
from aiogram import F

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
API_TOKEN = os.getenv("API_TOKEN")
ADMIN_COMMANDS = ['start', 'manage_currency', 'get_currencies', 'convert']
USER_COMMANDS = ['start', 'get_currencies', 'convert']

#–ú–µ–Ω—é
user_commands = [
    BotCommand(command="start", description="–ó–∞–ø—É—Å–∫"),
    BotCommand(command="get_currencies", description="–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç"),
    BotCommand(command="convert", description="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è"),
]

admin_commands = [
    BotCommand(command="start", description="–ó–∞–ø—É—Å–∫"),
    BotCommand(command="manage_currency", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–∞–º–∏"),
    BotCommand(command="get_currencies", description="–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç"),
    BotCommand(command="convert", description="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è"),
]

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)

dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def create_db_connection():
    return await asyncpg.connect(
        user='postgres',
        password='postgres',
        database='tg_bot_vt',
        host='localhost',
        port=5432
    )

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class CurrencyStates(StatesGroup):
    waiting_for_currency_name = State()
    waiting_for_currency_rate = State()
    waiting_for_currency_to_delete = State()
    waiting_for_currency_to_update = State()
    waiting_for_new_rate = State()
    waiting_for_convert_currency = State()
    waiting_for_convert_amount = State()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
async def is_admin(chat_id):
    conn = await create_db_connection()
    admin = await conn.fetchrow("SELECT * FROM admins WHERE chat_id = $1", chat_id)
    await conn.close()
    return admin is not None

async def set_bot_commands():
    await bot.set_my_commands(user_commands, scope=BotCommandScopeDefault())

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = await create_db_connection()
    admins = await conn.fetch("SELECT chat_id FROM admins")
    await conn.close()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∞
    for admin in admins:
        await bot.set_my_commands(admin_commands, scope=BotCommandScopeChat(chat_id=admin['chat_id']))

# –ö–æ–º–∞–Ω–¥–∞ start
@dp.message(Command('start'))
async def cmd_start(message: Message):
    is_user_admin = await is_admin(str(message.from_user.id))

    if is_user_admin:
        response = (
            "üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!\n\n"
            "üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "üí≤ /start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n"
            "üíæ /manage_currency - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–∞–º–∏ (–¥–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å)\n"
            "üìä /get_currencies - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç\n"
            "üí∏ /convert - –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É –≤ —Ä—É–±–ª–∏\n"
        )
    else:
        response = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            "üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "üí≤ /start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n"
            "üìä /get_currencies - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç\n"
            "üí∏ /convert - –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É –≤ —Ä—É–±–ª–∏\n"
        )

    await message.answer(response)

# –ö–æ–º–∞–Ω–¥–∞ manage_currency (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message(Command('manage_currency'))
async def cmd_manage_currency(message: Message):
    if not await is_admin(str(message.from_user.id)):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ")
        return

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É"),
                KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É"),
                KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã")
            ]
        ],
        resize_keyboard=True
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É")
async def add_currency_start(message: Message, state: FSMContext):
    await state.set_state(CurrencyStates.waiting_for_currency_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã (–¥–æ 5 —Å–∏–º–≤–æ–ª–æ–≤)", reply_markup=ReplyKeyboardRemove())

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@dp.message(CurrencyStates.waiting_for_currency_name)
async def process_currency_name(message: Message, state: FSMContext):
    currency_name = message.text.strip().upper()[:5]

    if len(currency_name) < 1:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 5 —Å–∏–º–≤–æ–ª–æ–≤")
        return

    conn = await create_db_connection()
    try:
        existing_currency = await conn.fetchrow(
            "SELECT * FROM currencies WHERE currency_name = $1", currency_name
        )
        if existing_currency:
            await message.answer("–î–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            await state.clear()
            return

        await state.update_data(currency_name=currency_name)
        await state.set_state(CurrencyStates.waiting_for_currency_rate)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –∫ —Ä—É–±–ª—é (—á–∏—Å–ª–æ —Å –º–∞–∫—Å–∏–º—É–º 2 –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)")
    finally:
        await conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@dp.message(CurrencyStates.waiting_for_currency_rate)
async def process_currency_rate(message: Message, state: FSMContext):
    try:
        rate = round(float(message.text), 2)
        if rate <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫—É—Ä—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 75.50)")
        return

    user_data = await state.get_data()
    currency_name = user_data['currency_name']

    conn = await create_db_connection()
    try:
        await conn.execute(
            "INSERT INTO currencies (currency_name, rate) VALUES ($1, $2)",
            currency_name, rate
        )
        await message.answer(f"–í–∞–ª—é—Ç–∞: {currency_name} —Å –∫—É—Ä—Å–æ–º {rate} RUB —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã: {str(e)}")
    finally:
        await conn.close()
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É"
@dp.message(F.text == "–£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É")
async def delete_currency_start(message: Message, state: FSMContext):
    if not await is_admin(str(message.from_user.id)):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ")
        return

    conn = await create_db_connection()
    try:
        currencies = await conn.fetch("SELECT currency_name FROM currencies ORDER BY currency_name")
        if not currencies:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=ReplyKeyboardRemove())
            return

        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=currency['currency_name'])] for currency in currencies],
            resize_keyboard=True
        )
        await state.set_state(CurrencyStates.waiting_for_currency_to_delete)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    finally:
        await conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.message(CurrencyStates.waiting_for_currency_to_delete)
async def process_currency_to_delete(message: Message, state: FSMContext):
    currency_name = message.text.strip().upper()

    conn = await create_db_connection()
    try:
        existing_currency = await conn.fetchrow(
            "SELECT * FROM currencies WHERE currency_name = $1", currency_name
        )
        if not existing_currency:
            await message.answer("–î–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            await state.clear()
            return
        await conn.execute(
            "DELETE FROM currencies WHERE currency_name = $1",
            currency_name
        )
        await message.answer(f"–í–∞–ª—é—Ç–∞ {currency_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã: {str(e)}", reply_markup=ReplyKeyboardRemove())
    finally:
        await conn.close()
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã"
@dp.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã")
async def update_currency_start(message: Message, state: FSMContext):
    if not await is_admin(str(message.from_user.id)):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ")
        return

    conn = await create_db_connection()
    try:
        currencies = await conn.fetch("SELECT currency_name FROM currencies ORDER BY currency_name")
        if not currencies:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è", reply_markup=ReplyKeyboardRemove())
            return

        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=currency['currency_name'])] for currency in currencies],
            resize_keyboard=True
        )
        await state.set_state(CurrencyStates.waiting_for_currency_to_update)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞:", reply_markup=keyboard)
    finally:
        await conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.message(CurrencyStates.waiting_for_currency_to_update)
async def process_currency_to_update(message: Message, state: FSMContext):
    currency_name = message.text.strip().upper()

    conn = await create_db_connection()
    try:
        existing_currency = await conn.fetchrow(
            "SELECT * FROM currencies WHERE currency_name = $1", currency_name
        )
        if not existing_currency:
            await message.answer("–î–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            await state.clear()
            return

        await state.update_data(currency_name=currency_name)
        await state.set_state(CurrencyStates.waiting_for_new_rate)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å –∫ —Ä—É–±–ª—é (—á–∏—Å–ª–æ —Å –º–∞–∫—Å–∏–º—É–º 2 –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)",
                           reply_markup=ReplyKeyboardRemove())
    finally:
        await conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã
@dp.message(CurrencyStates.waiting_for_new_rate)
async def process_new_rate(message: Message, state: FSMContext):
    try:
        new_rate = round(float(message.text), 2)
        if new_rate <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫—É—Ä—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 75.50)")
        return

    user_data = await state.get_data()
    currency_name = user_data['currency_name']

    conn = await create_db_connection()
    try:
        await conn.execute(
            "UPDATE currencies SET rate = $1 WHERE currency_name = $2",
            new_rate, currency_name
        )
        await message.answer(f"–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã {currency_name} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_rate} RUB")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {str(e)}")
    finally:
        await conn.close()
        await state.clear()


# –ö–æ–º–∞–Ω–¥–∞ get_currencies (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
@dp.message(Command('get_currencies'))
async def cmd_get_currencies(message: Message):
    conn = await create_db_connection()
    try:
        currencies = await conn.fetch("SELECT currency_name, rate FROM currencies ORDER BY currency_name")
        if not currencies:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç")
            return

        response = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:\n"
        for currency in currencies:
            response += f"{currency['currency_name']}: {currency['rate']:.2f} RUB\n"

        await message.answer(response)
    finally:
        await conn.close()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /convert (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
@dp.message(Command('convert'))
async def cmd_convert(message: Message, state: FSMContext):
    conn = await create_db_connection()
    currencies = await conn.fetch("SELECT currency_name FROM currencies ORDER BY currency_name")
    await conn.close()

    if not currencies:
        await message.answer("–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≤–∞–ª—é—Ç—É.")
        return

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=currency['currency_name'])] for currency in currencies],
        resize_keyboard=True
    )

    await state.set_state(CurrencyStates.waiting_for_convert_currency)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:", reply_markup=keyboard)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
@dp.message(CurrencyStates.waiting_for_convert_currency)
async def process_convert_currency(message: Message, state: FSMContext):
    currency_name = message.text.strip().upper()

    conn = await create_db_connection()
    try:
        currency = await conn.fetchrow(
            "SELECT * FROM currencies WHERE currency_name = $1", currency_name
        )
        if not currency:
            await message.answer("–î–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return

        await state.update_data(currency_name=currency_name, rate=currency['rate'])
        await state.set_state(CurrencyStates.waiting_for_convert_amount)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
    finally:
        await conn.close()


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
@dp.message(CurrencyStates.waiting_for_convert_amount)
async def process_convert_amount(message: Message, state: FSMContext):
    text = message.text.strip().replace(",", ".")

    if not re.match(r'^-?\d+(\.\d+)?$', text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return

    amount = Decimal(text)
    if amount <= 0:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        return

    user_data = await state.get_data()
    currency_name = user_data['currency_name']
    rate = user_data['rate']

    result = amount * rate

    await message.answer(f"{amount} {currency_name} = {result:.2f} RUB")
    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await set_bot_commands()
    await dp.start_polling(bot)


if __name__ == '__main__':
    import asyncio
    asyncio.run(main())