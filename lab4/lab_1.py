import os
import logging
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import asyncio

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("API_TOKEN")

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞–ª –≤ BotFather –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∫–æ–º–∞–Ω–¥
dp = Dispatcher()


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥
def get_help_text():
    return (
        "üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üí≤ /start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n"
        "üí∞ /save_currency - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã\n"
        "üí∏ /convert - –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É –≤ —Ä—É–±–ª–∏\n"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç.\n"
        f"{get_help_text()}"
    )


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–ª—é—Ç
currency_dict = {}


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã
class CurrencyForm(StatesGroup):
    name = State()
    rate = State()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
class ConvertForm(StatesGroup):
    currency_name = State()
    amount = State()


# –ö–æ–º–∞–Ω–¥–∞ /save_currency ‚Äî –Ω–∞—á–∞–ª–æ
@dp.message(Command("save_currency"))
async def save_currency(message: types.Message, state: FSMContext):
    await message.answer("üíµ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD):")
    await state.set_state(CurrencyForm.name)


# –®–∞–≥ b ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
@dp.message(CurrencyForm.name)
async def process_currency_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.upper())
    await message.answer("üíπ –í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å —ç—Ç–æ–π –≤–∞–ª—é—Ç—ã –∫ —Ä—É–±–ª—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 91.5):")
    await state.set_state(CurrencyForm.rate)


# –®–∞–≥ d ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã
@dp.message(CurrencyForm.rate)
async def process_currency_rate(message: types.Message, state: FSMContext):
    try:
        rate = float(message.text.replace(",", "."))
        data = await state.get_data()
        currency_name = data["name"]
        currency_dict[currency_name] = rate
        await message.answer(f"‚úÖ–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: 1 {currency_name} = {rate} RUB")
    except ValueError:
        await message.answer("‚ùå–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    await state.clear()


# –ö–æ–º–∞–Ω–¥–∞ /convert ‚Äî –Ω–∞—á–∞–ª–æ
@dp.message(Command("convert"))
async def convert_currency(message: types.Message, state: FSMContext):
    await message.answer("üíµ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD):")
    await state.set_state(ConvertForm.currency_name)


# –®–∞–≥ b ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
@dp.message(ConvertForm.currency_name)
async def process_convert_currency_name(message: types.Message, state: FSMContext):
    currency_name = message.text.upper()
    if currency_name not in currency_dict:
        await message.answer(f"ü•≤ –í–∞–ª—é—Ç–∞ {currency_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É.")
        return

    await state.update_data(currency_name=currency_name)
    await message.answer(f"üßÆ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ {currency_name} –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —Ä—É–±–ª–∏:")
    await state.set_state(ConvertForm.amount)


# –®–∞–≥ d ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å—É–º–º—É
@dp.message(ConvertForm.amount)
async def process_convert_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
        data = await state.get_data()
        currency_name = data["currency_name"]
        rate = currency_dict[currency_name]
        result = amount * rate
        await message.answer(f"‚úÖ {amount} {currency_name} = {result:.2f} RUB")
    except ValueError:
        await message.answer("‚ùå–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    await state.clear()


# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())